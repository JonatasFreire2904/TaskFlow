@page "/login"
@using TaskFlow.Blazor.Models
@inject TaskFlow.Blazor.Services.AuthService Auth
@inject TaskFlow.Blazor.Services.TokenProvider TokenProvider
@inject NavigationManager Nav

<h3>Fa√ßa login para continuar</h3>

<EditForm Model="model" OnValidSubmit="DoLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Email</label>
        <InputText @bind="model.Email" class="form-control" placeholder="Digite seu email" />
    </div>

    <div class="mb-2">
        <label>Senha</label>
        <InputText @bind="model.Password" type="password" class="form-control" placeholder="Digite sua senha" />
    </div>

    <button type="submit" class="btn btn-primary">Entrar</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger mt-2">@error</div>
}

@code {
    private LoginRequest model = new LoginRequest();
    private string? error;

    private async Task DoLogin()
    {
        error = null;
        var ok = await Auth.LoginAsync(model);
        if (!ok)
        {
            error = "Falha no login. Verifique credenciais.";
            return;
        }

        // pega token do storage e salva userId
        var token = await TokenProvider.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            var claims = TaskFlow.Blazor.Services.JwtHelper.ParseClaimsFromJwt(token);
            string? userId = null;
            if (claims.TryGetValue("nameid", out var n1)) userId = n1;
            else if (claims.TryGetValue("sub", out var n2)) userId = n2;
            else if (claims.TryGetValue("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var n3)) userId = n3;

            if (!string.IsNullOrEmpty(userId))
            {
                await TokenProvider.SetItemAsync("userId", userId);
            }
        }

        Nav.NavigateTo("/tasks");
    }
}
