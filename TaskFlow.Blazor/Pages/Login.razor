@page "/login"
@inject TaskFlow.Blazor.Services.AuthService Auth
@inject TaskFlow.Blazor.Services.TokenProvider TokenProvider
@inject NavigationManager Nav

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2 class="login-title">TaskFlow</h2>
            <p class="login-subtitle">Faça login para continuar</p>
        </div>
        
        <div class="login-body">
            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <input @bind="email" 
                       type="email" 
                       class="form-control" 
                       id="email" 
                       placeholder="Digite seu email" />
            </div>
            
            <div class="form-group">
                <label for="password" class="form-label">Senha</label>
                <input @bind="password" 
                       type="password" 
                       class="form-control" 
                       id="password" 
                       placeholder="Digite sua senha" />
            </div>
            
            <button class="btn btn-primary btn-login" @onclick="DoLogin" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                Entrar
            </button>
        </div>
        
        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-3">@error</div>
        }
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
    }
    
    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        padding: 40px;
        width: 100%;
        max-width: 400px;
    }
    
    .login-header {
        text-align: center;
        margin-bottom: 30px;
    }
    
    .login-title {
        color: #333;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 8px;
    }
    
    .login-subtitle {
        color: #666;
        font-size: 1rem;
        margin: 0;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #333;
    }
    
    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .btn-login {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        transition: transform 0.2s ease;
    }
    
    .btn-login:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }
    
    .btn-login:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    
    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        border: none;
        font-size: 0.9rem;
    }
</style>

@code {
    private string email = "";
    private string password = "";
    private string error = "";
    private bool isLoading = false;

    private async Task DoLogin()
    {
        error = "";
        var ok = await Auth.LoginAsync(new TaskFlow.Blazor.Models.LoginRequest { Email = email, Password = password });
        if (!ok)
        {
            error = "Falha no login. Verifique credenciais.";
            return;
        }

        // pegar token e extrair userId
        var token = await TokenProvider.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            var claims = TaskFlow.Blazor.Services.JwtHelper.ParseClaimsFromJwt(token);

            // tenta v�rias chaves comuns para nameidentifier
            string? userId = null;
            if (claims.TryGetValue("nameid", out var v1)) userId = v1;
            else if (claims.TryGetValue("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var v2)) userId = v2;
            else if (claims.TryGetValue("sub", out var v3)) userId = v3;

            if (!string.IsNullOrEmpty(userId))
            {
                await TokenProvider.SetItemAsync("userId", userId);
            }
        }

        Nav.NavigateTo("/tasks");
    }
}
